/* Enunciado:
Considere o seguinte código em Java:

Map<String, String> cidades =
Map.of("11","Amapá","13","Itaubal","15","Cutias");
String texto =
  cidades.entrySet().stream().sorted(
     (e1, e2) -> e1.getKey().compareTo(e2.getKey()))
    .map(e-> Arrays.asList(e.getKey(), e.getValue()))
    .map(e-> String.join(", ", e))
    .collect(Collectors.joining(": "));

System.out.println(texto);

Ao ser executado com as importações necessárias, o código Java
acima imprime na saída padrão:

A) Cutias: 15, Amapá: 11, Itaubal: 13
B) Amapá: 11, Cutias: 15, Itaubal: 13
C) 11, Amapá: 13, Itaubal: 15, Cutias
D) 11: Amapá, 13: Itaubal, 15: Cutias
E) 15: Cutias, 13: Itaubal, 11: Amapá
*/

// Código para ser executado:
public class MyClass {
  public static void main(String args[]) {
    Map<String, String> cidades =
    Map.of("11","Amapá","13","Itaubal","15","Cutias");
    String texto =
    cidades.entrySet().stream().sorted(
        (e1, e2) -> e1.getKey().compareTo(e2.getKey()))
        .map(e-> Arrays.asList(e.getKey(), e.getValue()))
        .map(e-> String.join(", ", e))
        .collect(Collectors.joining(": "));
    
    System.out.println(texto);
  }
}

/* Comentário:
Para começarmos a explicação da questão, devemos entender as cláusulas utilizadas:


Para a resolução desse código, vamos analisar posso a passo:
1: Declaração do Mapa
Map<String, String> cidades = Map.of("11","Amapá","13","Itaubal","15","Cutias");
-O Map nada mais é do que um array turbinado de índices e valores. Cada par será o índice e valor, exatamente nessa ordem.
-Nesse caso específico, o Map.of mapeou os elementos da seguinte maneira:
  Índice: 11, Valor: Amapá
  Índice: 13, Valor: Itaubal
  Índice: 15, Valor: Cutias

2: Criação do Stream
cidades.entrySet().stream()
-O método entrySet() retorna um conjunto contendo todos os pares chave-valor do mapa.
-O método stream() converte esse conjunto em um fluxo (Stream) para manipulação.
-Ou seja, essa linha basicamente prepara os índices e valores para manipulação.

3: Ordenação do Stream
*/
